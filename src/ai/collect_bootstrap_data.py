# collect_bootstrap_data.py
import asyncio
import pickle
import json
import uuid
from pathlib import Path
from datetime import datetime
from tqdm.asyncio import tqdm_asyncio
import logging
from mcts import BootstrapDataCollector, AsyncGameApi, MCTSExperience
from tqdm import tqdm
import numpy as np
from typing import Dict, List, Any
import time


class JSONGameData:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""

    @staticmethod
    def experience_to_dict(exp: MCTSExperience) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç MCTSExperience –≤ —Å–ª–æ–≤–∞—Ä—å"""
        # –ï—Å–ª–∏ state - —ç—Ç–æ Pydantic –º–æ–¥–µ–ª—å, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        if hasattr(exp.state, "model_dump"):
            state_dict = exp.state.model_dump()
        else:
            state_dict = exp.state

        return {
            "state": state_dict,
            "visit_distribution": exp.visit_distribution,
            "action_values": exp.action_values,
            "total_visits": exp.total_visits,
            "selected_action_id": exp.selected_action_id,
            "game_progress": exp.game_progress,
            "game_outcome": exp.game_outcome,
            "moves_to_end": exp.moves_to_end,
        }

    @staticmethod
    def save_game(game_data: Dict, filepath: Path):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –≤ JSON"""
        json_data = {
            "game_id": game_data["game_id"],
            "total_moves": game_data["total_moves"],
            "winner": game_data["winner"],
            "experiences": [
                JSONGameData.experience_to_dict(exp) for exp in game_data["experiences"]
            ],
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å ensure_ascii=False –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        with open(filepath, "w", encoding="utf-8") as f:
            json.dump(json_data, f, ensure_ascii=False, indent=2)


async def collect_single_game(
    collector: BootstrapDataCollector,
    game_id: int,
    progress_bar: tqdm_asyncio,
    session_uuid: str,
) -> Dict:
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–π –∏–≥—Ä—ã"""
    try:
        start_time = time.time()

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
        game_data = await collector.collect_game(game_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON –≤ –ø–∞–ø–∫—É —Å UUID —Å–µ—Å—Å–∏–∏
        output_path = Path(
            f"bootstrap_data/games_{session_uuid}/game_{game_id:04d}.json"
        )
        output_path.parent.mkdir(parents=True, exist_ok=True)

        JSONGameData.save_game(game_data, output_path)

        duration = time.time() - start_time

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_bar.update(1)
        progress_bar.set_postfix(
            {
                "moves": game_data["total_moves"],
                "winner": game_data["winner"],
                "time": f"{duration:.1f}s",
            }
        )

        return {
            "game_id": game_id,
            "duration": duration,
            "moves": game_data["total_moves"],
            "winner": game_data["winner"],
            "experiences": len(game_data["experiences"]),
        }

    except Exception as e:
        logging.error(f"Game {game_id} failed: {e}", exc_info=True)
        print(e)
        return {"game_id": game_id, "error": str(e)}


async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    NUM_GAMES = 8
    CONCURRENT_GAMES = 8  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∏–≥—Ä—ã
    MCTS_ITERATIONS = 10  # –ò—Ç–µ—Ä–∞—Ü–∏–π MCTS –Ω–∞ —Ö–æ–¥

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    session_uuid = str(uuid.uuid4())[:8]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π UUID –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    session_folder = f"bootstrap_data/games_{session_uuid}"

    print(f"üìÅ –°–µ—Å—Å–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {session_uuid}")
    print(f"üìÇ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {session_folder}")

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    Path(session_folder).mkdir(parents=True, exist_ok=True)
    Path("bootstrap_data/logs").mkdir(parents=True, exist_ok=True)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_filename = f"bootstrap_data/logs/collection_{session_uuid}_{datetime.now():%Y%m%d_%H%M%S}.log"
    logging.basicConfig(
        filename=log_filename,
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")

    # API —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    api = AsyncGameApi(
        base_url="http://localhost:8080",
        max_concurrent=CONCURRENT_GAMES * 2,  # –ó–∞–ø–∞—Å –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    )

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã MCTS
    mcts_params = {
        "iterations": MCTS_ITERATIONS,
        "c": 1.4,  # exploration constant
        "max_depth": 30,
        "temperature_schedule": {
            0: 1.0,  # –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã - –±–æ–ª—å—à–µ exploration
            20: 0.5,  # –°–µ—Ä–µ–¥–∏–Ω–∞
            60: 0.1,  # –ö–æ–Ω–µ—Ü - exploitation
        },
    }

    collector = BootstrapDataCollector(api, mcts_params)

    print(f"–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å–æ–±—Ä–∞—Ç—å {NUM_GAMES} –∏–≥—Ä")
    print(f"–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: {CONCURRENT_GAMES} –∏–≥—Ä")
    print(f"MCTS –∏—Ç–µ—Ä–∞—Ü–∏–π –Ω–∞ —Ö–æ–¥: {MCTS_ITERATIONS}")

    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    progress_bar = tqdm_asyncio(total=NUM_GAMES, desc="–°–±–æ—Ä –∏–≥—Ä", unit="games")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –±–∞—Ç—á–∞–º–∏
    results = []
    for batch_start in range(0, NUM_GAMES, CONCURRENT_GAMES):
        batch_end = min(batch_start + CONCURRENT_GAMES, NUM_GAMES)
        batch_tasks = [
            collect_single_game(collector, game_id, progress_bar, session_uuid)
            for game_id in range(batch_start, batch_end)
        ]

        batch_results = await asyncio.gather(*batch_tasks)
        results.extend(batch_results)

    progress_bar.close()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–ø–∫—É —Å–µ—Å—Å–∏–∏
    await save_metadata(results, mcts_params, session_uuid, session_folder)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º API
    await api.close()

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print_statistics(results, session_uuid)


async def save_metadata(
    results: List[Dict], mcts_params: Dict, session_uuid: str, session_folder: str
):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    successful = [r for r in results if "error" not in r]
    failed = [r for r in results if "error" in r]

    metadata = {
        "session_uuid": session_uuid,
        "collection_date": datetime.now().isoformat(),
        "total_games": len(results),
        "successful_games": len(successful),
        "failed_games": len(failed),
        "mcts_params": mcts_params,
        "statistics": {
            "total_experiences": sum(r.get("experiences", 0) for r in successful),
            "avg_game_length": (
                sum(r.get("moves", 0) for r in successful) / len(successful)
                if successful
                else 0
            ),
            "avg_collection_time": (
                sum(r.get("duration", 0) for r in successful) / len(successful)
                if successful
                else 0
            ),
            "win_distribution": {},
        },
        "failed_games": [
            {"game_id": r["game_id"], "error": r["error"]} for r in failed
        ],
    }

    # –ü–æ–¥—Å—á–µ—Ç –ø–æ–±–µ–¥
    for r in successful:
        winner = r.get("winner", "unknown")
        metadata["statistics"]["win_distribution"][winner] = (
            metadata["statistics"]["win_distribution"].get(winner, 0) + 1
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–ø–∫—É —Å–µ—Å—Å–∏–∏
    metadata_path = Path(session_folder) / "metadata.json"
    with open(metadata_path, "w") as f:
        json.dump(metadata, f, indent=2, ensure_ascii=False)

    # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π –∏–Ω–¥–µ–∫—Å –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
    await update_sessions_index(session_uuid, metadata)


async def update_sessions_index(session_uuid: str, session_metadata: Dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    index_path = Path("bootstrap_data/sessions_index.json")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    if index_path.exists():
        with open(index_path, "r", encoding="utf-8") as f:
            index = json.load(f)
    else:
        index = {"sessions": []}

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    session_info = {
        "uuid": session_uuid,
        "date": session_metadata["collection_date"],
        "total_games": session_metadata["total_games"],
        "successful_games": session_metadata["successful_games"],
        "total_experiences": session_metadata["statistics"]["total_experiences"],
        "folder": f"games_{session_uuid}",
    }

    index["sessions"].append(session_info)
    index["last_updated"] = datetime.now().isoformat()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    with open(index_path, "w", encoding="utf-8") as f:
        json.dump(index, f, indent=2, ensure_ascii=False)


def print_statistics(results: List[Dict], session_uuid: str):
    """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    successful = [r for r in results if "error" not in r]

    print("\n" + "=" * 50)
    print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ë–û–†–ê –î–ê–ù–ù–´–•")
    print("=" * 50)
    print(f"–°–µ—Å—Å–∏—è: {session_uuid}")

    print(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ –∏–≥—Ä: {len(successful)}/{len(results)}")

    if successful:
        total_moves = sum(r["moves"] for r in successful)
        total_time = sum(r["duration"] for r in successful)
        total_exp = sum(r["experiences"] for r in successful)

        print(f"–í—Å–µ–≥–æ —Ö–æ–¥–æ–≤: {total_moves}")
        print(f"–í—Å–µ–≥–æ experiences: {total_exp}")
        print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time/60:.1f} –º–∏–Ω—É—Ç")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∏–≥—Ä—É: {total_time/len(successful):.1f} —Å–µ–∫")
        print(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –∏–≥—Ä—ã: {total_moves/len(successful):.1f} —Ö–æ–¥–æ–≤")

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥
        winners = {}
        for r in successful:
            winner = r.get("winner", "unknown")
            winners[winner] = winners.get(winner, 0) + 1

        print("\nüèÜ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥:")
        for winner, count in winners.items():
            print(f"   {winner}: {count} ({count/len(successful)*100:.1f}%)")

        print(f"\nüìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: bootstrap_data/games_{session_uuid}/")


if __name__ == "__main__":
    asyncio.run(main())
